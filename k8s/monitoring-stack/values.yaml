## prometheus chart values.yaml
prometheus:  
  rbac:
    create: true
  
  podSecurityPolicy:
    enabled: false
  
  ## Define serviceAccount names for components. Defaults to component's fully qualified name.
  ##
  serviceAccounts:
    alertmanager:
      create: false
    nodeExporter:
      create: true
    pushgateway:
      create: false
    server:
      create: true
  
  alertmanager:
    ## If false, alertmanager will not be installed
    ##
    enabled: false
  
  ## Monitors ConfigMap changes and POSTs to a URL
  ## Ref: https://github.com/jimmidyson/configmap-reload
  ##
  configmapReload:
    prometheus:
      ## If false, the configmap-reload container will not be deployed
      ##
      enabled: true
  
      ## configmap-reload container name
      ##
      name: configmap-reload
  
      ## configmap-reload container image
      ##
      image:
        repository: harbor.danal.co.kr/docker_hub/jimmidyson/configmap-reload
        tag: v0.5.0
        pullPolicy: IfNotPresent
  
      ## Security context to be added to configmap-reload container
      containerSecurityContext: {}
  
      ## configmap-reload resource requests and limits
      ## Ref: http://kubernetes.io/docs/user-guide/compute-resources/
      ##
      resources:
        limits:
          cpu: 200m
          memory: 50Mi
        requests:
          cpu: 100m
          memory: 30Mi
    alertmanager:
      ## If false, the configmap-reload container will not be deployed
      ##
      enabled: false
  
  kubeStateMetrics:
    ## If false, kube-state-metrics sub-chart will not be installed
    ##
    enabled: true
  
  ## kube-state-metrics sub-chart configurable values
  ## Please see https://github.com/prometheus-community/helm-charts/tree/main/charts/kube-state-metrics
  ##
  kube-state-metrics:
    image:
      repository: harbor.danal.co.kr/google_gcr/kube-state-metrics/kube-state-metrics
      # Overrides the image tag whose default is v{{ .Chart.AppVersion }}
      tag: v2.4.1
      pullPolicy: IfNotPresent
  
  nodeExporter:
    ## If false, node-exporter will not be installed
    ##
    enabled: true

    ## If true, node-exporter pods share the host network namespace
    ##
    hostNetwork: true

    ## If true, node-exporter pods share the host PID namespace
    ##
    hostPID: true

    ## If true, node-exporter pods mounts host / at /host/root
    ##
    hostRootfs: true

    ## node-exporter container name
    ##
    name: node-exporter
  
    ## node-exporter container image
    ##
    image:
      repository: harbor.danal.co.kr/quay_io/prometheus/node-exporter
      tag: v1.3.1
      pullPolicy: IfNotPresent
  
    ## Custom Update Strategy
    ##
    updateStrategy:
      type: RollingUpdate
  
    ## Node tolerations for node-exporter scheduling to nodes with taints
    ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
    ##
    tolerations:
      - key: node-role-kubernetes.io/control-plane
        operator: Exists
        effect: NoSchedule
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule

    ## PodDisruptionBudget settings
    ## ref: https://kubernetes.io/docs/concepts/workloads/pods/disruptions/
    ##
    podDisruptionBudget:
      enabled: false
  
    ## node-exporter resource limits & requests
    ## Ref: https://kubernetes.io/docs/user-guide/compute-resources/
    ##
    resources: 
       limits:
         cpu: 200m
         memory: 50Mi
       requests:
         cpu: 100m
         memory: 30Mi
    container:
      securityContext:
        allowPrivilegeEscalation: false
  
    ## Security context to be added to node-exporter pods
    ##
    securityContext:
      fsGroup: 65534
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
  
    service:
      annotations:
        prometheus.io/scrape: "true"
  
      # Exposed as a headless service:
      # https://kubernetes.io/docs/concepts/services-networking/service/#headless-services
      clusterIP: ""
  
      hostPort: 9100
      type: ClusterIP
  
  
  server:
    ## Prometheus server container name
    ##
    enabled: true
  
    name: server
  
    ## Prometheus server container image
    ##
    image:
      repository: harbor.danal.co.kr/docker_hub/prom/prometheus
      tag: v2.34.0
      pullPolicy: IfNotPresent
  
    ## Additional server container environment variables
    ##
    ## You specify this manually like you would a raw deployment manifest.
    ## This means you can bind in environment variables from secrets.
    ##
    ## e.g. static environment variable:
    ##  - name: DEMO_GREETING
    ##    value: "Hello from the environment"
    ##
    ## e.g. secret environment variable:
    ## - name: USERNAME
    ##   valueFrom:
    ##     secretKeyRef:
    ##       name: mysecret
    ##       key: username
    env:
      - name: cluster
        value: "pc_dev"
  
    # List of flags to override default parameters, e.g:
    # - --enable-feature=agent
    # - --storage.agent.retention.max-time=30m
    defaultFlagsOverride: []
  
    extraFlags:
      - web.enable-lifecycle
      ## web.enable-admin-api flag controls access to the administrative HTTP API which includes functionality such as
      ## deleting time series. This is disabled by default.
      - web.enable-admin-api
      - enable-feature=expand-external-labels

    ## Path to a configuration file on prometheus server container FS
    configPath: /etc/config/prometheus.yml

    global:
      scrape_interval: 10s
      scrape_timeout: 5s
      external_labels:
        cluster: ${cluster}
        __replica__: ${HOSTNAME}
      evaluation_interval: 10s
    #  query_log_file: /prometheus/query.log
  
    ## https://prometheus.io/docs/prometheus/latest/configuration/configuration/#remote_write
    ##
    remoteWrite:
      - url: http://monitoring_stack_cortex_distributor:9009/api/v1/push
        remote_timeout: 15s
        headers:
          X-Scope-OrgID: fs-solution
        name: cortex
        send_exemplars: false
        queue_config:
          capacity: 2500
          max_shards: 200
          min_shards: 1
          max_samples_per_send: 500
          batch_send_deadline: 5s
          min_backoff: 30ms
          max_backoff: 5s
          retry_on_http_429: false
        metadata_config:
          send: true
          send_interval: 1m
          max_samples_per_send: 500
  
    ingress:
      ## If true, Prometheus server Ingress will be created
      ##
      enabled: false

    ## Node tolerations for server scheduling to nodes with taints
    ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
    ##
    tolerations:
      - key: node-role-kubernetes.io/control-plane
        operator: Exists
        effect: NoSchedule
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule

    ## PodDisruptionBudget settings
    ## ref: https://kubernetes.io/docs/concepts/workloads/pods/disruptions/
    ##
    podDisruptionBudget:
      enabled: false
  
    persistentVolume:
      ## If true, Prometheus server will create/use a Persistent Volume Claim
      ## If false, use emptyDir
      ##
      enabled: true
  
      ## Prometheus server data Persistent Volume access modes
      ## Must match those of existing PV or dynamic provisioner
      ## Ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
      ##
      accessModes:
        - ReadWriteOnce
  
      ## Prometheus server data Persistent Volume mount root path
      ##
      mountPath: /data

      ## Prometheus server data Persistent Volume size
      ##
      size: 16Gi
  
      ## Prometheus server data Persistent Volume Storage Class
      ## If defined, storageClassName: <storageClass>
      ## If set to "-", storageClassName: "", which disables dynamic provisioning
      ## If undefined (the default) or set to null, no storageClassName spec is
      ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
      ##   GKE, AWS & OpenStack)
      ##
      storageClass: prometheus-server
  
      localStorageClass:
        annotations: {}
      
      localPersistentVolume:
        annotations: {}
        persistentVolumeReclaimPolicy: Retain
        nodeAffinity: []
        baseDirPath: /home/service/prometheus-local-pv
  
    ## Use a StatefulSet if replicaCount needs to be greater than 1 (see below)
    ##
    replicaCount: 2
  
    statefulSet:
      ## If true, use a statefulset instead of a deployment for pod management.
      ## This allows to scale replicas to more than 1 pod
      ##
      enabled: false
  
    ## Prometheus server readiness and liveness probe initial delay and timeout
    ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
    ##
    readinessProbeInitialDelay: 30
    readinessProbePeriodSeconds: 5
    readinessProbeTimeout: 4
    readinessProbeFailureThreshold: 3
    readinessProbeSuccessThreshold: 1
    livenessProbeInitialDelay: 30
    livenessProbePeriodSeconds: 15
    livenessProbeTimeout: 10
    livenessProbeFailureThreshold: 3
    livenessProbeSuccessThreshold: 1
    startupProbe:
      enabled: true
      periodSeconds: 5
      failureThreshold: 30
      timeoutSeconds: 10
  
    ## Prometheus server resource requests and limits
    ## Ref: http://kubernetes.io/docs/user-guide/compute-resources/
    ##
    resources:
       limits:
         cpu: 500m
         memory: 1.5Gi
       requests:
         cpu: 300m
         memory: 1Gi

    ## Vertical Pod Autoscaler config
    ## Ref: https://github.com/kubernetes/autoscaler/tree/master/vertical-pod-autoscaler
    verticalAutoscaler:
      ## If true a VPA object will be created for the controller (either StatefulSet or Deployemnt, based on above configs)
      enabled: false

    ## Security context to be added to server pods
    ##
    securityContext:
      runAsUser: 65534
      runAsNonRoot: true
      runAsGroup: 65534
      fsGroup: 65534
  
    ## Security context to be added to server container
    containerSecurityContext: {}
  
    service:
      ## If false, no Service will be created for the Prometheus server
      ##
      enabled: true
  
      ## List of IP addresses at which the Prometheus server service is available
      ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips
      ##
      externalIPs: []
  
      servicePort: 9090
      sessionAffinity: None
      type: ClusterIP
  
      ## Enable gRPC port on service to allow auto discovery with thanos-querier
      gRPC:
        enabled: false
  
      ## If using a statefulSet (statefulSet.enabled=true), configure the
      ## service to connect to a specific replica to have a consistent view
      ## of the data.
      statefulsetReplica:
        enabled: false
  
    ## Prometheus server pod termination grace period
    ##
    terminationGracePeriodSeconds: 300

    ## Array of extra Kubernetes manifests, in form of YAML object,
    ## if you want to deploy
    extraObjects: []
    # - apiVersion: v1
    #   kind: ConfigMap
    #   metadata:
    #     name: '{{ template "prometheus.name" . }}-extra-config'

    ## Array of extra Kubernetes manifest, in form of template string,
    ## if you want to deploy
    extraTemplates:
      - |
        {{- if .Values.server.enabled -}}
        {{- if not .Values.server.statefulSet.enabled -}}
        {{- if .Values.server.persistentVolume.enabled -}}
        {{- if not .Values.server.persistentVolume.existingClaim -}}
        {{- if (eq "prometheus-server" .Values.server.persistentVolume.storageClass) -}}
        apiVersion: storage.k8s.io/v1
        kind: StorageClass
        metadata:
          {{- if .Values.server.persistentVolume.localStorageClass.annotations }}
          annotations:
        {{ toYaml .Values.server.persistentVolume.localStorageClass.annotations | indent 4 }}
          {{- end }}
          labels:
            {{- include "prometheus.server.labels" . | nindent 4 }}
          name: {{ .Values.server.persistentVolume.storageClass }}
        provisioner: kubernetes.io/no-provisioner
        volumeBindingMode: WaitForFirstConsumer
        reclaimPolicy: {{ .Values.server.persistentVolume.localPersistentVolume.persistentVolumeReclaimPolicy }}
        {{- end -}}
        {{- end -}}
        {{- end -}}
        {{- end -}}
        {{- end -}}
      - |
        {{- if .Values.server.enabled -}}
        {{- if not .Values.server.statefulSet.enabled -}}
        {{- if .Values.server.persistentVolume.enabled -}}
        {{- if not .Values.server.persistentVolume.existingClaim -}}
        {{- if (eq "prometheus-server" .Values.server.persistentVolume.storageClass) -}}
        apiVersion: v1
        kind: PersistentVolume
        metadata:
          {{- if .Values.server.persistentVolume.localPersistentVolume.annotations }}
          annotations:
        {{ toYaml .Values.server.persistentVolume.localPersistentVolume.annotations | indent 4 }}
          {{- end }}
          labels:
            {{- include "prometheus.server.labels" . | nindent 4 }}
          name: {{ template "prometheus.server.fullname" . }}
        spec:
          accessModes:
        {{ toYaml .Values.server.persistentVolume.accessModes | indent 4 }}
          volumeMode: Filesystem
          storageClassName: {{ .Values.server.persistentVolume.storageClass }}
          {{- if .Values.server.persistentVolume.localPersistentVolume.persistentVolumeReclaimPolicy }}
          persistentVolumeReclaimPolicy: {{ .Values.server.persistentVolume.localPersistentVolume.persistentVolumeReclaimPolicy }}
          {{- end }}
          capacity:
            storage: "{{ .Values.server.persistentVolume.size }}"
          claimRef:
            apiVersion: v1
            kind: PersistentVolumeClaim
            {{ include "prometheus.namespace" . }}
            name: {{ template "prometheus.server.fullname" . }}
          nodeAffinity:
            required:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.io/hostname
                  operator: In
                  values: {{ toYaml .Values.server.persistentVolume.localPersistentVolume.nodeAffinity | nindent 12 }}
          local:
            path: {{ .Values.server.persistentVolume.localPersistentVolume.baseDirPath }}
        {{- end -}}
        {{- end -}}
        {{- end -}}
        {{- end -}}
        {{- end -}}
  
  pushgateway:
    ## If false, pushgateway will not be installed
    ##
    enabled: false
  
  ## Prometheus server ConfigMap entries for rule files (allow prometheus labels interpolation)
  ruleFiles:
    basic_rules.yml: |
      groups:
        - name: node_exporter
          rules:
            - record: node:cpu_none_guest_usage:ratio40s
              expr: sum by(hostname, instance, job, mode) (rate(node_cpu_seconds_total[40s]))/ ignoring(mode) group_left() (sum by(hostname, instance, job) (rate(node_cpu_seconds_total[40s])) + sum by(hostname, instance, job) (rate(node_cpu_guest_seconds_total[40s])))
          # metrics list that contain CPU core label
          # node_cpu_frequency_max_hertz
          # node_cpu_frequency_min_hertz
          # node_cpu_guest_seconds_total
          # node_cpu_scaling_frequency_hertz
          # node_cpu_scaling_frequency_max_hertz
          # node_cpu_scaling_frequency_min_hertz
          # node_cpu_seconds_total
          # node_schedstat_running_seconds_total
          # node_schedstat_timeslices_total
          # node_schedstat_waiting_seconds_total
          # node_softnet_dropped_total
          # node_softnet_processed_total
          # node_softnet_times_squeezed_total
        - name: casvisor
          rules:
            - record: container:cpu_second_usage:ratio40s
              expr: avg by (hostname, name, instance, job) (rate(container_cpu_usage_seconds_total[40s]))
  
  ## Prometheus server ConfigMap entries
  ##
  serverFiles:
    prometheus.yml:
      rule_files:
        - /etc/config/basic_rules.yml

      scrape_configs:
        ## k8s Control Plane Components
        ##

        # kube-apiserver
        - job_name: k8s-control-plane-component-kube-apiserver
          kubernetes_sd_configs:
            - role: endpoints
          scheme: https
          tls_config:
            ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            insecure_skip_verify: true
          bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
          relabel_configs:
            - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
              action: keep
              regex: default;kubernetes;https

        ## k8s Node Components
        ##

        # kubelet(/metrics endpoint)
        - job_name: k8s-node-component-kubelet-metrics
          kubernetes_sd_configs:
            - role: node
          scheme: https
          tls_config:
            ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            insecure_skip_verify: true
          bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
          relabel_configs:
    #        - action: labelmap
    #          regex: __meta_kubernetes_node_label_(.+)
            - target_label: __address__
              replacement: kubernetes.default.svc:443
            # use k8s API server as proxy
            - source_labels: [__meta_kubernetes_node_name]
              regex: (.+)
              target_label: __metrics_path__
              replacement: /api/v1/nodes/$1/proxy/metrics
  
        # kubelet(/metrics/cadvisor endpoint)
        - job_name: k8s-node-component-kubelet-cadvisor-metrics
          kubernetes_sd_configs:
            - role: node
          scheme: https
          tls_config:
            ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            insecure_skip_verify: true
          bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
          relabel_configs:
    #        - action: labelmap
    #          regex: __meta_kubernetes_node_label_(.+)
            - target_label: __address__
              replacement: kubernetes.default.svc:443
            # use k8s API server as proxy
            - source_labels: [__meta_kubernetes_node_name]
              regex: (.+)
              target_label: __metrics_path__
              replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor

        ## etc
        ##

        # node-exporter(deployed using Helm official Prometheus chart)
        - job_name: 'node-exporter'
          kubernetes_sd_configs:
            - role: endpoints
          relabel_configs:
            # basic relabelling with prometheus.io/* label
            - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
              action: keep
              regex: true
            - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape_slow]
              action: drop
              regex: true
            - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
              action: replace
              target_label: __scheme__
              regex: (https?)
            - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
              action: replace
              target_label: __metrics_path__
              regex: (.+)
            - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
              action: replace
              target_label: __address__
              regex: (.+?)(?::\d+)?;(\d+)
              replacement: $1:$2
            - action: labelmap
              regex: __meta_kubernetes_service_annotation_prometheus_io_param_(.+)
              replacement: __param_$1
            # etc relabelling
            - source_labels: [__meta_kubernetes_service_label_app_kubernetes_io_managed_by, __meta_kubernetes_service_label_component]
              action: keep
              regex: Helm;node-exporter
            - source_labels: [__meta_kubernetes_pod_node_name]
              action: replace
              target_label: hostname

        # kube-state-metrics(deployed using Helm official Prometheus chart)
        - job_name: 'kube-state-metrics'
          kubernetes_sd_configs:
            - role: endpoints
          relabel_configs:
            # basic relabelling with prometheus.io/* label
            - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
              action: keep
              regex: true
            - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape_slow]
              action: drop
              regex: true
            - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
              action: replace
              target_label: __scheme__
              regex: (https?)
            - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
              action: replace
              target_label: __metrics_path__
              regex: (.+)
            - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
              action: replace
              target_label: __address__
              regex: (.+?)(?::\d+)?;(\d+)
              replacement: $1:$2
            - action: labelmap
              regex: __meta_kubernetes_service_annotation_prometheus_io_param_(.+)
              replacement: __param_$1
            # etc relabelling
            - source_labels: [__meta_kubernetes_service_label_app_kubernetes_io_managed_by, __meta_kubernetes_endpoints_label_app_kubernetes_io_component]
              action: keep
              regex: Helm;metrics
            - source_labels: [__meta_kubernetes_pod_node_name]
              action: replace
              target_label: hostname
              
        # prometheus(deployed using Helm official Prometheus chart)
        - job_name: 'prometheus'
          kubernetes_sd_configs:
            - role: endpoints
          relabel_configs:
            # basic relabelling with prometheus.io/* label
            - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
              action: keep
              regex: true
            - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape_slow]
              action: drop
              regex: true
            - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
              action: replace
              target_label: __scheme__
              regex: (https?)
            - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
              action: replace
              target_label: __metrics_path__
              regex: (.+)
            - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
              action: replace
              target_label: __address__
              regex: (.+?)(?::\d+)?;(\d+)
              replacement: $1:$2
            - action: labelmap
              regex: __meta_kubernetes_service_annotation_prometheus_io_param_(.+)
              replacement: __param_$1
            # etc relabelling
            - source_labels: [__meta_kubernetes_service_label_app_kubernetes_io_managed_by, __meta_kubernetes_service_label_component]
              action: keep
              regex: Helm;server
            - source_labels: [__meta_kubernetes_pod_node_name]
              action: replace
              target_label: hostname

  networkPolicy:
    ## Enable creation of NetworkPolicy resources.
    ##
    enabled: false

